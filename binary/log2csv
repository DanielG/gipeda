#!/usr/bin/perl

use strict;
use warnings;

use File::Basename;
use File::Slurp;

my %times = (
	"s" => 1,
	"ms" => 0.001,
	"us" => 0.000001, # us/μs, criterion can print it either way.
	"μs" => 0.000001,
	"ns" => 0.000000001,
	"ps" => 0.000000000001,
	"fs" => 0.000000000000001,
	"as" => 0.000000000000000001,
);

# convert seconds to nano seconds.
my $standard_multiplier = 1000000000;

for my $filename (@ARGV) {
        my $log = read_file($filename);

	if ($log =~ m!C memory throughput benchmarks:\n1000MB of bytes written in .*? at: ([0-9.]+?)MB/s\n1000MB of bytes read    in .*? at: ([0-9.]+?)MB/s\n1000MB of words written in .*? at: ([0-9.]+?)MB/s\n1000MB of words read    in .*? at: ([0-9.]+?)MB/s!sm) {
		print "throughput/bytes/written/C;$1\n";
		print "throughput/bytes/read/C;$2\n";
		print "throughput/words/written/C;$3\n";
		print "throughput/words/read/C;$4\n";
	}


	if ($log =~ m!Haskell memory throughput benchmarks:\n1000MB of bytes written in .*? at: ([0-9.]+?)MB/s\n1000MB of bytes read    in .*? at: ([0-9.]+?)MB/s\n1000MB of words written in .*? at: ([0-9.]+?)MB/s\n1000MB of words read    in .*? at: ([0-9.]+?)MB/s!sm) {
		print "throughput/bytes/written/Haskell;$1\n";
		print "throughput/bytes/read/Haskell;$2\n";
		print "throughput/words/written/Haskell;$3\n";
		print "throughput/words/read/Haskell;$4\n";
	}

	# Find all compiler warnings and count them.
	my $warnings = () = $log =~ /:[0-9]+:[0-9]+: Warning:/g;
	print "build/warnings;$warnings\n";

	while($log =~ /benchmarking ([^\n]+?)\ntime\s+([0-9\.]+) (s|ms|us|μs|ns|ps|fs|as)/msg) {
		# matching the following string;
		# ---
		# benchmarking <name of benchmark: 1>
		# time         <time as float point: 2> <unit: 3>
		# ---
		my $multiplier = $times{$3};
		my $time = $2 * $multiplier * $standard_multiplier;
		printf("benchmark/%s;%d\n", $1, $time);
	}
}
